services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth_service_api
    volumes:
      - ./:/app
    ports:
      - ${API_PORT:-8100}:8100
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-auth_db}
      - REDIS_URL=redis://$${REDIS_PASSWORD:+:$${REDIS_PASSWORD}@}redis:6379/0
    depends_on:
      - db
      - redis
    restart: always
    networks:
      - auth_network
    command: uvicorn src.main:app --host 0.0.0.0 --port 8100 --reload

  db:
    image: postgres:15-alpine
    container_name: auth_service_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-auth_db}
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    restart: always
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: auth_service_redis
    command: redis-server --requirepass $${REDIS_PASSWORD:-redis}
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - auth_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  auth_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
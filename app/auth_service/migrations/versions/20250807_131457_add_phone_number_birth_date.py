"""add_phone_number_birth_date

Revision ID: 987b381862e2
Revises: fd4f50219aab
Create Date: 2025-08-07 13:14:57.717210+00:00

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "987b381862e2"
down_revision: Union[str, None] = "fd4f50219aab"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_login_history_2025_09_id", table_name="login_history_2025_09")
    op.drop_index(
        "idx_login_history_2025_09_login_time", table_name="login_history_2025_09"
    )
    op.drop_index(
        "idx_login_history_2025_09_successful", table_name="login_history_2025_09"
    )
    op.drop_index(
        "idx_login_history_2025_09_user_id", table_name="login_history_2025_09"
    )
    op.drop_table("login_history_2025_09")
    op.drop_index("idx_login_history_2025_11_id", table_name="login_history_2025_11")
    op.drop_index(
        "idx_login_history_2025_11_login_time", table_name="login_history_2025_11"
    )
    op.drop_index(
        "idx_login_history_2025_11_successful", table_name="login_history_2025_11"
    )
    op.drop_index(
        "idx_login_history_2025_11_user_id", table_name="login_history_2025_11"
    )
    op.drop_table("login_history_2025_11")
    op.drop_index("idx_login_history_2025_12_id", table_name="login_history_2025_12")
    op.drop_index(
        "idx_login_history_2025_12_login_time", table_name="login_history_2025_12"
    )
    op.drop_index(
        "idx_login_history_2025_12_successful", table_name="login_history_2025_12"
    )
    op.drop_index(
        "idx_login_history_2025_12_user_id", table_name="login_history_2025_12"
    )
    op.drop_table("login_history_2025_12")
    op.drop_index("idx_login_history_2025_10_id", table_name="login_history_2025_10")
    op.drop_index(
        "idx_login_history_2025_10_login_time", table_name="login_history_2025_10"
    )
    op.drop_index(
        "idx_login_history_2025_10_successful", table_name="login_history_2025_10"
    )
    op.drop_index(
        "idx_login_history_2025_10_user_id", table_name="login_history_2025_10"
    )
    op.drop_table("login_history_2025_10")
    op.drop_index("idx_login_history_2026_02_id", table_name="login_history_2026_02")
    op.drop_index(
        "idx_login_history_2026_02_login_time", table_name="login_history_2026_02"
    )
    op.drop_index(
        "idx_login_history_2026_02_successful", table_name="login_history_2026_02"
    )
    op.drop_index(
        "idx_login_history_2026_02_user_id", table_name="login_history_2026_02"
    )
    op.drop_table("login_history_2026_02")
    op.drop_index("idx_login_history_2026_03_id", table_name="login_history_2026_03")
    op.drop_index(
        "idx_login_history_2026_03_login_time", table_name="login_history_2026_03"
    )
    op.drop_index(
        "idx_login_history_2026_03_successful", table_name="login_history_2026_03"
    )
    op.drop_index(
        "idx_login_history_2026_03_user_id", table_name="login_history_2026_03"
    )
    op.drop_table("login_history_2026_03")
    op.drop_index("idx_login_history_2026_04_id", table_name="login_history_2026_04")
    op.drop_index(
        "idx_login_history_2026_04_login_time", table_name="login_history_2026_04"
    )
    op.drop_index(
        "idx_login_history_2026_04_successful", table_name="login_history_2026_04"
    )
    op.drop_index(
        "idx_login_history_2026_04_user_id", table_name="login_history_2026_04"
    )
    op.drop_table("login_history_2026_04")
    op.drop_index("idx_login_history_2026_05_id", table_name="login_history_2026_05")
    op.drop_index(
        "idx_login_history_2026_05_login_time", table_name="login_history_2026_05"
    )
    op.drop_index(
        "idx_login_history_2026_05_successful", table_name="login_history_2026_05"
    )
    op.drop_index(
        "idx_login_history_2026_05_user_id", table_name="login_history_2026_05"
    )
    op.drop_table("login_history_2026_05")
    op.drop_index("idx_login_history_2026_06_id", table_name="login_history_2026_06")
    op.drop_index(
        "idx_login_history_2026_06_login_time", table_name="login_history_2026_06"
    )
    op.drop_index(
        "idx_login_history_2026_06_successful", table_name="login_history_2026_06"
    )
    op.drop_index(
        "idx_login_history_2026_06_user_id", table_name="login_history_2026_06"
    )
    op.drop_table("login_history_2026_06")
    op.drop_index("idx_login_history_2026_01_id", table_name="login_history_2026_01")
    op.drop_index(
        "idx_login_history_2026_01_login_time", table_name="login_history_2026_01"
    )
    op.drop_index(
        "idx_login_history_2026_01_successful", table_name="login_history_2026_01"
    )
    op.drop_index(
        "idx_login_history_2026_01_user_id", table_name="login_history_2026_01"
    )
    op.drop_table("login_history_2026_01")
    op.drop_index("idx_login_history_2026_07_id", table_name="login_history_2026_07")
    op.drop_index(
        "idx_login_history_2026_07_login_time", table_name="login_history_2026_07"
    )
    op.drop_index(
        "idx_login_history_2026_07_successful", table_name="login_history_2026_07"
    )
    op.drop_index(
        "idx_login_history_2026_07_user_id", table_name="login_history_2026_07"
    )
    op.drop_table("login_history_2026_07")
    op.drop_index("idx_login_history_2025_08_id", table_name="login_history_2025_08")
    op.drop_index(
        "idx_login_history_2025_08_login_time", table_name="login_history_2025_08"
    )
    op.drop_index(
        "idx_login_history_2025_08_successful", table_name="login_history_2025_08"
    )
    op.drop_index(
        "idx_login_history_2025_08_user_id", table_name="login_history_2025_08"
    )
    op.drop_table("login_history_2025_08")
    op.alter_column(
        "login_history",
        "login_time",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "login_history",
        "successful",
        existing_type=sa.CHAR(length=1),
        type_=sa.String(length=1),
        existing_nullable=True,
        existing_server_default=sa.text("'Y'::bpchar"),
    )
    op.alter_column("login_history", "id", existing_type=sa.UUID(), nullable=False)
    op.create_index(
        op.f("ix_login_history_login_time"),
        "login_history",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        op.f("ix_login_history_user_id"), "login_history", ["user_id"], unique=False
    )
    op.add_column(
        "users", sa.Column("phone_number", sa.String(length=15), nullable=True)
    )
    op.add_column("users", sa.Column("first_name", sa.String(length=50), nullable=True))
    op.add_column("users", sa.Column("last_name", sa.String(length=50), nullable=True))
    op.add_column("users", sa.Column("birth_date", sa.Date(), nullable=True))
    op.create_unique_constraint(None, "users", ["phone_number"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="unique")
    op.drop_column("users", "birth_date")
    op.drop_column("users", "last_name")
    op.drop_column("users", "first_name")
    op.drop_column("users", "phone_number")
    op.drop_index(op.f("ix_login_history_user_id"), table_name="login_history")
    op.drop_index(op.f("ix_login_history_login_time"), table_name="login_history")
    op.alter_column("login_history", "id", existing_type=sa.UUID(), nullable=True)
    op.alter_column(
        "login_history",
        "successful",
        existing_type=sa.String(length=1),
        type_=sa.CHAR(length=1),
        existing_nullable=True,
        existing_server_default=sa.text("'Y'::bpchar"),
    )
    op.alter_column(
        "login_history",
        "login_time",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.create_table(
        "login_history_2025_08",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2025_08_user_id",
        "login_history_2025_08",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_08_successful",
        "login_history_2025_08",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_08_login_time",
        "login_history_2025_08",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_08_id", "login_history_2025_08", ["id"], unique=False
    )
    op.create_table(
        "login_history_2026_07",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2026_07_user_id",
        "login_history_2026_07",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_07_successful",
        "login_history_2026_07",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_07_login_time",
        "login_history_2026_07",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_07_id", "login_history_2026_07", ["id"], unique=False
    )
    op.create_table(
        "login_history_2026_01",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2026_01_user_id",
        "login_history_2026_01",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_01_successful",
        "login_history_2026_01",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_01_login_time",
        "login_history_2026_01",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_01_id", "login_history_2026_01", ["id"], unique=False
    )
    op.create_table(
        "login_history_2026_06",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2026_06_user_id",
        "login_history_2026_06",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_06_successful",
        "login_history_2026_06",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_06_login_time",
        "login_history_2026_06",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_06_id", "login_history_2026_06", ["id"], unique=False
    )
    op.create_table(
        "login_history_2026_05",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2026_05_user_id",
        "login_history_2026_05",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_05_successful",
        "login_history_2026_05",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_05_login_time",
        "login_history_2026_05",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_05_id", "login_history_2026_05", ["id"], unique=False
    )
    op.create_table(
        "login_history_2026_04",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2026_04_user_id",
        "login_history_2026_04",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_04_successful",
        "login_history_2026_04",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_04_login_time",
        "login_history_2026_04",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_04_id", "login_history_2026_04", ["id"], unique=False
    )
    op.create_table(
        "login_history_2026_03",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2026_03_user_id",
        "login_history_2026_03",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_03_successful",
        "login_history_2026_03",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_03_login_time",
        "login_history_2026_03",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_03_id", "login_history_2026_03", ["id"], unique=False
    )
    op.create_table(
        "login_history_2026_02",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2026_02_user_id",
        "login_history_2026_02",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_02_successful",
        "login_history_2026_02",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_02_login_time",
        "login_history_2026_02",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2026_02_id", "login_history_2026_02", ["id"], unique=False
    )
    op.create_table(
        "login_history_2025_10",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2025_10_user_id",
        "login_history_2025_10",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_10_successful",
        "login_history_2025_10",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_10_login_time",
        "login_history_2025_10",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_10_id", "login_history_2025_10", ["id"], unique=False
    )
    op.create_table(
        "login_history_2025_12",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2025_12_user_id",
        "login_history_2025_12",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_12_successful",
        "login_history_2025_12",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_12_login_time",
        "login_history_2025_12",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_12_id", "login_history_2025_12", ["id"], unique=False
    )
    op.create_table(
        "login_history_2025_11",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2025_11_user_id",
        "login_history_2025_11",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_11_successful",
        "login_history_2025_11",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_11_login_time",
        "login_history_2025_11",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_11_id", "login_history_2025_11", ["id"], unique=False
    )
    op.create_table(
        "login_history_2025_09",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "user_agent", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column(
            "login_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "successful",
            sa.CHAR(length=1),
            server_default=sa.text("'Y'::bpchar"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="login_history_user_id_fkey"
        ),
    )
    op.create_index(
        "idx_login_history_2025_09_user_id",
        "login_history_2025_09",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_09_successful",
        "login_history_2025_09",
        ["successful"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_09_login_time",
        "login_history_2025_09",
        ["login_time"],
        unique=False,
    )
    op.create_index(
        "idx_login_history_2025_09_id", "login_history_2025_09", ["id"], unique=False
    )
    # ### end Alembic commands ###

services:
  service:
    build: django/
    expose:
      - "8000"
    env_file:
      - ./.env
    depends_on:
      - theatre-db
      - elasticsearch-logs
    volumes:
      - static-data:/var/www/static/
      - ./logs:/app/logs
    networks:
      - theatre_network_d
      - auth-service_auth_network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs:/etc/nginx/conf.d:ro
      - static-data:/var/www/static/
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - service
      - fastapi
    ports:
      - "80:80"
    networks:
      - theatre_network_d
    restart: unless-stopped

  theatre-db:
    image: postgres:14
    env_file:
      - ./.env
    volumes:
      - ./database_dump.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - theatre_network_d
    restart: unless-stopped

  elasticsearch:
    image: elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - cluster.name=app-cluster
      - node.name=elasticsearch-app
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - theatre_network_d

  movies-etl:
    build: etl/
    env_file:
      - etl/.env
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
    depends_on:
      - elasticsearch
      - theatre-db
    networks:
      - theatre_network_d
    restart: unless-stopped

  theatre-redis:
    image: redis:alpine
    networks:
      - theatre_network_d
    restart: unless-stopped

  fastapi:
    build: fastapi/
    volumes:
      - ./logs:/app/logs
    ports:
      - "9000:9000"
    env_file:
      - fastapi/.env
    depends_on:
      - elasticsearch
      - service
      - theatre-redis
      - elasticsearch-logs
    networks:
      - theatre_network_d
      - auth-service_auth_network
    restart: unless-stopped

  # Elasticsearch for logging (separate from app ES)
  elasticsearch-logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch-logs
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=logging-cluster
      - bootstrap.memory_lock=true
      - node.name=elasticsearch-logs
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./deploy/esdata:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
    networks:
      - theatre_network_d
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=5601
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch-logs:
        condition: service_healthy
    networks:
      - theatre_network_d
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.10.2
    container_name: filebeat
    user: root
    volumes:
      - ./deploy/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - ./logs/nginx:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat_data:/usr/share/filebeat/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
      - KIBANA_HOST=http://kibana:5601
    depends_on:
      elasticsearch-logs:
        condition: service_healthy
    networks:
      - theatre_network_d
    command: filebeat -e -strict.perms=false
    restart: unless-stopped

volumes:
  static-data:
  esdata:
  postgres_data:
  filebeat_data:

networks:
  theatre_network_d:
    name: theatre_network_d
  auth-service_auth_network:
    external: true
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
–ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import time

from data_generator import CinemaDataGenerator
from database_clients import ClickHouseClient, VerticaClient
from models import BenchmarkConfig


class QuickTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.generator = CinemaDataGenerator()
        self.clickhouse = None
        self.vertica = None

    def test_data_generation(self, sample_size: int = 100):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–±–æ—Ä–∫–∞: {sample_size})")

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        start_time = time.time()
        users = list(self.generator.generate_users(sample_size))
        generation_time = time.time() - start_time
        print(
            f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {generation_time:.2f}—Å"
        )
        
        example_user = users[0].model_dump()
        print(f"   üìã –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {example_user}")
        print(f"   üÜî UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {users[0].user_id}")
        print(f"   üìä –¢–∏–ø user_id: {type(users[0].user_id)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è
        birth_dates = [user.birth_date for user in users]
        print(f"   üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è: {min(birth_dates)} - {max(birth_dates)}")

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤
        print("\nüé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤...")
        start_time = time.time()
        movies = list(self.generator.generate_movies(sample_size))
        generation_time = time.time() - start_time
        print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤ –∑–∞ {generation_time:.2f}—Å")
        print(f"   üìã –ü—Ä–∏–º–µ—Ä: {movies[0].model_dump()}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –≤—ã—Ö–æ–¥–∞
        release_dates = [movie.release_date for movie in movies]
        print(f"   üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤—ã—Ö–æ–¥–∞: {min(release_dates)} - {max(release_dates)}")

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        print("\n‚≠ê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...")
        start_time = time.time()
        ratings = list(
            self.generator.generate_ratings(sample_size, sample_size, sample_size)
        )
        generation_time = time.time() - start_time
        print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(ratings)} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞ {generation_time:.2f}—Å")
        example_rating = ratings[0].model_dump()
        print(f"   üìã –ü—Ä–∏–º–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞: {example_rating}")
        print(f"   üÜî user_id –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {ratings[0].user_id} (—Ç–∏–ø: {type(ratings[0].user_id)})")

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∞–Ω—Å–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        print("\nüì∫ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∞–Ω—Å–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
        start_time = time.time()
        sessions = list(
            self.generator.generate_viewing_sessions(sample_size // 2, sample_size, sample_size)
        )
        generation_time = time.time() - start_time
        print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(sessions)} —Å–µ–∞–Ω—Å–æ–≤ –∑–∞ {generation_time:.2f}—Å")
        print(f"   üÜî user_id –≤ —Å–µ–∞–Ω—Å–µ: {sessions[0].user_id} (—Ç–∏–ø: {type(sessions[0].user_id)})")

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...")
        start_time = time.time()
        activities = list(
            self.generator.generate_user_activities(sample_size // 2, sample_size)
        )
        generation_time = time.time() - start_time
        print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(activities)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ {generation_time:.2f}—Å")
        print(f"   üÜî user_id –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activities[0].user_id} (—Ç–∏–ø: {type(activities[0].user_id)})")

        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print("üîë –í—Å–µ user_id –∏—Å–ø–æ–ª—å–∑—É—é—Ç UUID —Ñ–æ—Ä–º–∞—Ç")

    def test_database_connections(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")

        # –¢–µ—Å—Ç ClickHouse
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ClickHouse...")
        try:
            self.clickhouse = ClickHouseClient()
            self.clickhouse.connect()
            result, exec_time = self.clickhouse.execute_query("SELECT 1 as test")
            print(f"   ‚úÖ ClickHouse –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (–≤—Ä–µ–º—è: {exec_time:.2f}–º—Å)")
            print(f"   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {result}")
            self.clickhouse.disconnect()
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")

        # –¢–µ—Å—Ç Vertica
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vertica...")
        try:
            self.vertica = VerticaClient()
            self.vertica.connect()
            result, exec_time = self.vertica.execute_query("SELECT 1 as test")
            print(f"   ‚úÖ Vertica –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–≤—Ä–µ–º—è: {exec_time:.2f}–º—Å)")
            print(f"   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {result}")
            self.vertica.disconnect()
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vertica: {e}")

    def test_small_data_insertion(self, batch_size: int = 1000):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—Ç–∞–≤–∫—É –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size})")

        if not self.clickhouse or not self.vertica:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        self.clickhouse.connect()
        self.vertica.connect()

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
            print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            self.clickhouse.drop_tables()
            self.clickhouse.create_tables()
            self.vertica.drop_tables()
            self.vertica.create_tables()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            users = list(self.generator.generate_users(batch_size))
            print(f"   üë• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            print(f"   üÜî –ü—Ä–∏–º–µ—Ä UUID: {users[0].user_id}")
            
            movies = list(self.generator.generate_movies(batch_size))
            print(f"   üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(movies)}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            ratings = list(
                self.generator.generate_ratings(batch_size // 2, batch_size, batch_size)
            )
            print(f"   ‚≠ê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {len(ratings)}")

            # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ ClickHouse
            print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –≤ ClickHouse...")
            start_time = time.time()
            ch_insert_time_users = self.clickhouse.insert_users(users)
            ch_insert_time_movies = self.clickhouse.insert_movies(movies)
            ch_insert_time_ratings = self.clickhouse.insert_ratings(ratings)
            total_ch_time = time.time() - start_time

            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {ch_insert_time_users:.2f}–º—Å")
            print(f"   ‚úÖ –§–∏–ª—å–º—ã: {ch_insert_time_movies:.2f}–º—Å")
            print(f"   ‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏: {ch_insert_time_ratings:.2f}–º—Å")
            print(f"   üìä –û–±—â–µ–µ –≤—Ä–µ–º—è ClickHouse: {total_ch_time:.2f}—Å")

            # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ Vertica
            print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –≤ Vertica...")
            start_time = time.time()
            v_insert_time_users = self.vertica.insert_users(users)
            v_insert_time_movies = self.vertica.insert_movies(movies)
            v_insert_time_ratings = self.vertica.insert_ratings(ratings)
            total_v_time = time.time() - start_time

            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {v_insert_time_users:.2f}–º—Å")
            print(f"   ‚úÖ –§–∏–ª—å–º—ã: {v_insert_time_movies:.2f}–º—Å")
            print(f"   ‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏: {v_insert_time_ratings:.2f}–º—Å")
            print(f"   üìä –û–±—â–µ–µ –≤—Ä–µ–º—è Vertica: {total_v_time:.2f}—Å")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            faster_db = "ClickHouse" if total_ch_time < total_v_time else "Vertica"
            speed_diff = (
                abs(total_ch_time - total_v_time)
                / max(total_ch_time, total_v_time)
                * 100
            )
            print(f"\nüèÅ {faster_db} –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {speed_diff:.1f}%")
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å UUID —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ–±–µ –ë–î")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç–∞–≤–∫–∏: {e}")
        finally:
            self.clickhouse.disconnect()
            self.vertica.disconnect()

    def test_sample_queries(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

        if not self.clickhouse or not self.vertica:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return

        self.clickhouse.connect()
        self.vertica.connect()

        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            test_queries = [
                (
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    "SELECT COUNT(*) as user_count FROM users",
                    "SELECT COUNT(*) as user_count FROM users",
                ),
                (
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤",
                    "SELECT COUNT(*) as movie_count FROM movies",
                    "SELECT COUNT(*) as movie_count FROM movies",
                ),
                (
                    "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                    "SELECT AVG(score) as avg_rating FROM ratings",
                    "SELECT AVG(score) as avg_rating FROM ratings",
                ),
                (
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JOIN —Å UUID",
                    "SELECT COUNT(*) as joined_count FROM ratings r JOIN users u ON r.user_id = u.user_id",
                    "SELECT COUNT(*) as joined_count FROM ratings r JOIN users u ON r.user_id = u.user_id",
                ),
                (
                    "–ü—Ä–∏–º–µ—Ä—ã UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    "SELECT user_id, username FROM users LIMIT 3",
                    "SELECT user_id, username FROM users LIMIT 3",
                ),
            ]

            for description, ch_query, v_query in test_queries:
                print(f"\nüîç {description}:")

                # ClickHouse
                try:
                    ch_result, ch_time = self.clickhouse.execute_query(ch_query)
                    print(
                        f"   üìä ClickHouse: {ch_result[0] if ch_result else 'N/A'} ({ch_time:.2f}–º—Å)"
                    )
                    if "UUID" in description and ch_result:
                        print(f"      üìã –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏: {ch_result[:3] if len(ch_result) > 3 else ch_result}")
                except Exception as e:
                    print(f"   ‚ùå ClickHouse –æ—à–∏–±–∫–∞: {e}")

                # Vertica
                try:
                    v_result, v_time = self.vertica.execute_query(v_query)
                    print(
                        f"   üìà Vertica: {v_result[0] if v_result else 'N/A'} ({v_time:.2f}–º—Å)"
                    )
                    if "UUID" in description and v_result:
                        print(f"      üìã –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏: {v_result[:3] if len(v_result) > 3 else v_result}")
                except Exception as e:
                    print(f"   ‚ùå Vertica –æ—à–∏–±–∫–∞: {e}")

            print("\n‚úÖ UUID-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        finally:
            self.clickhouse.disconnect()
            self.vertica.disconnect()

    def get_benchmark_config_from_user(self) -> BenchmarkConfig:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–Ω—á–º–∞—Ä–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞")
        print("=" * 40)

        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        defaults = {
            "num_users": 1000,
            "num_movies": 500,
            "num_ratings": 2000,
            "num_sessions": 3000,
            "num_activities": 5000,
            "num_threads": 3,
            "queries_per_thread": 10,
            "batch_size": 500,
        }

        def get_int_input(prompt: str, default: int) -> int:
            """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –≤–≤–æ–¥ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
            user_input = input(f"{prompt} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default:,}): ").strip()
            if not user_input:
                return default
            try:
                return int(user_input.replace(",", "").replace(" ", ""))
            except ValueError:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—é {default:,}")
                return default

        print("üìä –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        num_users = get_int_input("üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", defaults["num_users"])
        num_movies = get_int_input("üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤", defaults["num_movies"])
        num_ratings = get_int_input("‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤", defaults["num_ratings"])
        num_sessions = get_int_input(
            "üì∫ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∞–Ω—Å–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", defaults["num_sessions"]
        )
        num_activities = get_int_input(
            "üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", defaults["num_activities"]
        )

        print("\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        num_threads = get_int_input("üîÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤", defaults["num_threads"])
        queries_per_thread = get_int_input(
            "üîç –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫", defaults["queries_per_thread"]
        )
        batch_size = get_int_input("üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞", defaults["batch_size"])

        config = BenchmarkConfig(
            num_users=num_users,
            num_movies=num_movies,
            num_ratings=num_ratings,
            num_sessions=num_sessions,
            num_activities=num_activities,
            num_threads=num_threads,
            queries_per_thread=queries_per_thread,
            batch_size=batch_size,
        )

        print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.model_dump()}")

        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print("\n‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        self.estimate_full_test_time(config)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏? (y/n): ").strip().lower()
        if confirm not in ["y", "yes", "–¥–∞", "–¥"]:
            print("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None

        return config

    def run_quick_benchmark(self, custom_config: BenchmarkConfig | None = None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if custom_config is None:
            # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            print("\nüöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞")
            print("1. üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é")
            print("2. ‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1/2): ").strip()

            if choice == "1":
                custom_config = self.get_benchmark_config_from_user()
                if custom_config is None:
                    return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
            else:
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                custom_config = BenchmarkConfig(
                    num_users=1000,
                    num_movies=500,
                    num_ratings=2000,
                    num_sessions=3000,
                    num_activities=5000,
                    num_threads=3,
                    queries_per_thread=10,
                    batch_size=500,
                )
                print(
                    f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {custom_config.model_dump()}"
                )

        print("\nüöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞...")
        print("üÜî –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∏–º–µ—Ç—å UUID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã")

        # –ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        from main import CinemaPerformanceStudy

        study = CinemaPerformanceStudy(custom_config)
        success = study.run_full_study()

        if success:
            print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üîë UUID –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

    def estimate_full_test_time(self, config: BenchmarkConfig):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        data_estimate = self.generator.estimate_data_size(config)

        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        generation_time_min = data_estimate["estimated_generation_time_minutes"]
        insertion_time_min = generation_time_min * 2.2  # –í—Å—Ç–∞–≤–∫–∞ –≤ 2 –ë–î + overhead –¥–ª—è UUID
        queries_time_min = 5  # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        concurrent_time_min = (
            config.num_threads * config.queries_per_thread
        ) / 1000  # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

        total_time_min = (
            generation_time_min
            + insertion_time_min
            + queries_time_min
            + concurrent_time_min
        )

        print(f"   üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: ~{generation_time_min:.1f} –º–∏–Ω—É—Ç")
        print(f"   üíæ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ~{insertion_time_min:.1f} –º–∏–Ω—É—Ç (–≤–∫–ª—é—á–∞—è UUID overhead)")
        print(f"   üîç –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã: ~{queries_time_min:.1f} –º–∏–Ω—É—Ç")
        print(f"   üöÄ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ~{concurrent_time_min:.1f} –º–∏–Ω—É—Ç")
        print(
            f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ~{total_time_min:.1f} –º–∏–Ω—É—Ç ({total_time_min / 60:.1f} —á–∞—Å–æ–≤)"
        )
        print(f"   üìÅ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ~{data_estimate['estimated_size_mb']:.1f} –ú–ë")
        print("   üÜî –†–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ~15% –∏–∑-–∑–∞ UUID –≤–º–µ—Å—Ç–æ integer")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = QuickTester()

    print("üß™ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (UUID –ø–æ–¥–¥–µ—Ä–∂–∫–∞)")
    print("=" * 60)

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
        print("1. üé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (—Å UUID)")
        print("2. üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î")
        print("3. üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (UUID)")
        print("4. üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ (UUID —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
        print("5. üöÄ –ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π, UUID)")
        print("6. ‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
        print("0. üö™ –í—ã—Ö–æ–¥")

        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞: ").strip()

        if choice == "1":
            sample_size = input("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ").strip()
            sample_size = int(sample_size) if sample_size else 100
            tester.test_data_generation(sample_size)

        elif choice == "2":
            tester.test_database_connections()

        elif choice == "3":
            batch_size = input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000): ").strip()
            batch_size = int(batch_size) if batch_size else 1000
            tester.test_small_data_insertion(batch_size)

        elif choice == "4":
            tester.test_sample_queries()

        elif choice == "5":
            tester.run_quick_benchmark()

        elif choice == "6":
            config = BenchmarkConfig()  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            tester.estimate_full_test_time(config)

        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()
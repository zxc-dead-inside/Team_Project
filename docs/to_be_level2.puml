@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Container(frontend, "Фронтенд")
Person(admin, "Администратор")

System_Boundary(theatre, "Кинотеатр") {
    Container(web, "nginx", "Reverse Proxy", "Обратный прокси")
    Container(django, "Django Service", "Admin Panel", "Панель администратора")
    Container(fastapi, "Film API", "Python/FastAPI", "Публичный API")
    Container(etl, "ETL Service", "Python", "Синхронизация данных с Elasticsearch")
    ContainerDb(db, "Database", "PostgreSQL", "Хранит данные фильмов")
    Container(es, "Elasticsearch", "Elasticsearch", "Поисковый движок")
    Container(redis, "Cash storage", "Redis", "Кэш/Очереди")
}

System_Ext(auth, "Auth-сервис") {
    Container(nginx_auth, "nginx", "Reverse Proxy", "Обратный прокси")
    Container(api, "Auth API", "FastAPI", "Обработка аутентификации")
    ContainerDb(auth_db, "Database", "PostgreSQL", "БД пользователей")
    Container(redis_auth, "Cash storage", "Redis", "Сессии/Кэш авторизации")
    Container(jaeger, "Jaeger", "Monitoring", "Трассировка запросов")
}

System_Ext(analytics, "Analytics-сервис") {
    Container(analitics_api, "Analytics API", "Python/FastAPI", "Публичный API")
    Container(etl_click_house, "ETL Service", "Python", "Синхронизация данных с ClickHouse")
    Container(kafka, "Message broker", "Kafka/RabbitMQ", "Распределенная очередь")
    Container(clickhouse, "Analytics Data Storage", "ClickHouse/Vertica", "Хранит данные по аналитике")
}

' Взаимодействие
Rel(admin, web, "Обращается через браузер")
Rel(frontend, web, "Обращается через API")
Rel(web, django, "Проксирует запросы")
Rel(web, fastapi, "Вызывает API", "HTTP")
Rel(fastapi, es, "Поиск фильмов")
Rel(fastapi, redis, "Кэширует данные")
Rel(django, db, "Читает и пишет")
Rel(etl, db, "Читает данные")
Rel(etl, es, "Пишет индекс")
Rel(fastapi, nginx_auth, "Проксирует запросы авторизации")
Rel(django, nginx_auth, "Проксирует запросы авторизации")
Rel(nginx_auth, api, "Переадресует API-вызовы")
Rel(api, auth_db, "Проверка данных пользователей")
Rel(api, redis_auth, "Сохраняет сессии")
Rel(api, jaeger, "Отправляет трассировки")
Rel(frontend, analitics_api, "Передает данные о действиях юзера", "HTTP")
Rel(analitics_api, kafka, "Отправляет данные в очередь")
Rel(kafka, etl_click_house, "Получает данные из очереди")
Rel(etl_click_house, clickhouse, "Пишет данные в ClickHouse")

@enduml
